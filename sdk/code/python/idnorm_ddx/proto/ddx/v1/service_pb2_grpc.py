# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from idnorm_ddx.proto.ddx.v1 import service_pb2 as proto_dot_ddx_dot_v1_dot_service__pb2


class ExtractionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScanDocument = channel.unary_unary(
                '/proto.ddx.v1.Extraction/ScanDocument',
                request_serializer=proto_dot_ddx_dot_v1_dot_service__pb2.ScanDocumentRequest.SerializeToString,
                response_deserializer=proto_dot_ddx_dot_v1_dot_service__pb2.ScanDocumentResponse.FromString,
                _registered_method=True)
        self.ScanTwoSidedDocument = channel.unary_unary(
                '/proto.ddx.v1.Extraction/ScanTwoSidedDocument',
                request_serializer=proto_dot_ddx_dot_v1_dot_service__pb2.ScanTwoSidedDocumentRequest.SerializeToString,
                response_deserializer=proto_dot_ddx_dot_v1_dot_service__pb2.ScanTwoSidedDocumentResponse.FromString,
                _registered_method=True)


class ExtractionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ScanDocument(self, request, context):
        """Detects document on a given image and extracts all relevant fields. For input parameters
        see ScanDocumentRequest Model documentation (in swagger, click on the "Model" in the request "Body" part)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScanTwoSidedDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExtractionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ScanDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanDocument,
                    request_deserializer=proto_dot_ddx_dot_v1_dot_service__pb2.ScanDocumentRequest.FromString,
                    response_serializer=proto_dot_ddx_dot_v1_dot_service__pb2.ScanDocumentResponse.SerializeToString,
            ),
            'ScanTwoSidedDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanTwoSidedDocument,
                    request_deserializer=proto_dot_ddx_dot_v1_dot_service__pb2.ScanTwoSidedDocumentRequest.FromString,
                    response_serializer=proto_dot_ddx_dot_v1_dot_service__pb2.ScanTwoSidedDocumentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ddx.v1.Extraction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.ddx.v1.Extraction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Extraction(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ScanDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ddx.v1.Extraction/ScanDocument',
            proto_dot_ddx_dot_v1_dot_service__pb2.ScanDocumentRequest.SerializeToString,
            proto_dot_ddx_dot_v1_dot_service__pb2.ScanDocumentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScanTwoSidedDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ddx.v1.Extraction/ScanTwoSidedDocument',
            proto_dot_ddx_dot_v1_dot_service__pb2.ScanTwoSidedDocumentRequest.SerializeToString,
            proto_dot_ddx_dot_v1_dot_service__pb2.ScanTwoSidedDocumentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
