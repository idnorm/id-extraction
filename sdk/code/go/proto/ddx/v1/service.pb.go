// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: proto/ddx/v1/service.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mrz Status
type Mrz_Status int32

const (
	// Mrz successfully detected, read and parsed
	Mrz_STATUS_OK Mrz_Status = 0
	// Mrz successfully detected, but value that was OCR-ed was not a valid MRZ format
	Mrz_STATUS_INVALID_FORMAT Mrz_Status = 1
	// Mrz successfully detected, read but checksum digits did not match the content encoded in the MRZ
	Mrz_STATUS_CHECK_DIGIT_INVALID Mrz_Status = 2
)

// Enum value maps for Mrz_Status.
var (
	Mrz_Status_name = map[int32]string{
		0: "STATUS_OK",
		1: "STATUS_INVALID_FORMAT",
		2: "STATUS_CHECK_DIGIT_INVALID",
	}
	Mrz_Status_value = map[string]int32{
		"STATUS_OK":                  0,
		"STATUS_INVALID_FORMAT":      1,
		"STATUS_CHECK_DIGIT_INVALID": 2,
	}
)

func (x Mrz_Status) Enum() *Mrz_Status {
	p := new(Mrz_Status)
	*p = x
	return p
}

func (x Mrz_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mrz_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ddx_v1_service_proto_enumTypes[0].Descriptor()
}

func (Mrz_Status) Type() protoreflect.EnumType {
	return &file_proto_ddx_v1_service_proto_enumTypes[0]
}

func (x Mrz_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mrz_Status.Descriptor instead.
func (Mrz_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{4, 0}
}

// Status - response status
type ScanDocumentResponse_Status int32

const (
	// Document successfully detected, classified and extracted
	ScanDocumentResponse_STATUS_OK ScanDocumentResponse_Status = 0
	// Document not found
	ScanDocumentResponse_STATUS_DOCUMENT_NOT_FOUND ScanDocumentResponse_Status = 1
	// Document successfully detected, but not supported for extraction
	ScanDocumentResponse_STATUS_DOCUMENT_NOT_SUPPORTED ScanDocumentResponse_Status = 2
	// Document successfully detected, supported for extraction, but it is a back side of the document
	ScanDocumentResponse_STATUS_DOCUMENT_BACK_SIDE ScanDocumentResponse_Status = 3
)

// Enum value maps for ScanDocumentResponse_Status.
var (
	ScanDocumentResponse_Status_name = map[int32]string{
		0: "STATUS_OK",
		1: "STATUS_DOCUMENT_NOT_FOUND",
		2: "STATUS_DOCUMENT_NOT_SUPPORTED",
		3: "STATUS_DOCUMENT_BACK_SIDE",
	}
	ScanDocumentResponse_Status_value = map[string]int32{
		"STATUS_OK":                     0,
		"STATUS_DOCUMENT_NOT_FOUND":     1,
		"STATUS_DOCUMENT_NOT_SUPPORTED": 2,
		"STATUS_DOCUMENT_BACK_SIDE":     3,
	}
)

func (x ScanDocumentResponse_Status) Enum() *ScanDocumentResponse_Status {
	p := new(ScanDocumentResponse_Status)
	*p = x
	return p
}

func (x ScanDocumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanDocumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ddx_v1_service_proto_enumTypes[1].Descriptor()
}

func (ScanDocumentResponse_Status) Type() protoreflect.EnumType {
	return &file_proto_ddx_v1_service_proto_enumTypes[1]
}

func (x ScanDocumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanDocumentResponse_Status.Descriptor instead.
func (ScanDocumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{5, 0}
}

type ScanTwoSidedDocumentResponse_Status int32

const (
	ScanTwoSidedDocumentResponse_STATUS_OK                   ScanTwoSidedDocumentResponse_Status = 0
	ScanTwoSidedDocumentResponse_STATUS_FRONT_SIDE_NOT_FOUND ScanTwoSidedDocumentResponse_Status = 1
	ScanTwoSidedDocumentResponse_STATUS_BACK_SIDE_NOT_FOUND  ScanTwoSidedDocumentResponse_Status = 2
	ScanTwoSidedDocumentResponse_STATUS_NOT_SUPPORTED        ScanTwoSidedDocumentResponse_Status = 3
)

// Enum value maps for ScanTwoSidedDocumentResponse_Status.
var (
	ScanTwoSidedDocumentResponse_Status_name = map[int32]string{
		0: "STATUS_OK",
		1: "STATUS_FRONT_SIDE_NOT_FOUND",
		2: "STATUS_BACK_SIDE_NOT_FOUND",
		3: "STATUS_NOT_SUPPORTED",
	}
	ScanTwoSidedDocumentResponse_Status_value = map[string]int32{
		"STATUS_OK":                   0,
		"STATUS_FRONT_SIDE_NOT_FOUND": 1,
		"STATUS_BACK_SIDE_NOT_FOUND":  2,
		"STATUS_NOT_SUPPORTED":        3,
	}
)

func (x ScanTwoSidedDocumentResponse_Status) Enum() *ScanTwoSidedDocumentResponse_Status {
	p := new(ScanTwoSidedDocumentResponse_Status)
	*p = x
	return p
}

func (x ScanTwoSidedDocumentResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScanTwoSidedDocumentResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ddx_v1_service_proto_enumTypes[2].Descriptor()
}

func (ScanTwoSidedDocumentResponse_Status) Type() protoreflect.EnumType {
	return &file_proto_ddx_v1_service_proto_enumTypes[2]
}

func (x ScanTwoSidedDocumentResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScanTwoSidedDocumentResponse_Status.Descriptor instead.
func (ScanTwoSidedDocumentResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{8, 0}
}

// DocumentClass
type DocumentClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Document type
	Type DocumentType `protobuf:"varint,3,opt,name=type,proto3,enum=proto.ddx.v1.DocumentType" json:"type,omitempty"`
	// Country
	Country Country `protobuf:"varint,4,opt,name=country,proto3,enum=proto.ddx.v1.Country" json:"country,omitempty"`
	// Territory
	Territory Territory `protobuf:"varint,5,opt,name=territory,proto3,enum=proto.ddx.v1.Territory" json:"territory,omitempty"`
}

func (x *DocumentClass) Reset() {
	*x = DocumentClass{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentClass) ProtoMessage() {}

func (x *DocumentClass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentClass.ProtoReflect.Descriptor instead.
func (*DocumentClass) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *DocumentClass) GetType() DocumentType {
	if x != nil {
		return x.Type
	}
	return DocumentType_DOCUMENT_TYPE_NOT_AVAILABLE
}

func (x *DocumentClass) GetCountry() Country {
	if x != nil {
		return x.Country
	}
	return Country_COUNTRY_NOT_AVAILABLE
}

func (x *DocumentClass) GetTerritory() Territory {
	if x != nil {
		return x.Territory
	}
	return Territory_TERRITORY_NOT_AVAILABLE
}

// ScanConfig - used to define if you want server to return the detected document
// image as well as the images of different detected fields.
type ScanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// returnDetectedImage - must be set if you want server to return the image of the detected document.
	// used to specify to the server to return detected document
	// dewarped image. Unless this is a HARD REQUIREMENT we do not recommend to use
	// this due to its computational and data overhead.
	ReturnDocumentImage *ScanConfig_ReturnImage `protobuf:"bytes,1,opt,name=returnDocumentImage,proto3" json:"returnDocumentImage,omitempty"`
	// returnFieldImages - must be set if you want server to return the images of the detected text fields.
	// leaving this empty means that server will NOT return any text field images (text only).
	ReturnTextFieldImages *ScanConfig_ReturnTextFieldImages `protobuf:"bytes,2,opt,name=returnTextFieldImages,proto3" json:"returnTextFieldImages,omitempty"`
	// returnVisualFields - specify visual fields to return.
	// if left empty, NO visual fields will be returned.
	ReturnVisualFields *ScanConfig_ReturnVisualFields `protobuf:"bytes,3,opt,name=returnVisualFields,proto3" json:"returnVisualFields,omitempty"`
	// returnDateFieldImages - must be se set if you want server to return the images of the detected date fields.
	// leaving this empty means that server will NOT return any date field images (text only).
	ReturnDateFieldImages *ScanConfig_ReturnDateFieldImages `protobuf:"bytes,4,opt,name=returnDateFieldImages,proto3" json:"returnDateFieldImages,omitempty"`
	// returnSexFieldImages - must be set if you want server to return the images of the detected sex fields.
	// leaving this empty means that server will NOT return any sex field images (text and enum only).
	ReturnSexFieldImages *ScanConfig_ReturnSexFieldImages `protobuf:"bytes,5,opt,name=returnSexFieldImages,proto3" json:"returnSexFieldImages,omitempty"`
	// skipDocumentDetection - if you want to "skip" document detection, set this to true.
	// if you already have a full-size image of a document (or already cropped image of a document)
	// set this to true.
	SkipDocumentDetection bool `protobuf:"varint,6,opt,name=skipDocumentDetection,proto3" json:"skipDocumentDetection,omitempty"`
}

func (x *ScanConfig) Reset() {
	*x = ScanConfig{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfig) ProtoMessage() {}

func (x *ScanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfig.ProtoReflect.Descriptor instead.
func (*ScanConfig) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ScanConfig) GetReturnDocumentImage() *ScanConfig_ReturnImage {
	if x != nil {
		return x.ReturnDocumentImage
	}
	return nil
}

func (x *ScanConfig) GetReturnTextFieldImages() *ScanConfig_ReturnTextFieldImages {
	if x != nil {
		return x.ReturnTextFieldImages
	}
	return nil
}

func (x *ScanConfig) GetReturnVisualFields() *ScanConfig_ReturnVisualFields {
	if x != nil {
		return x.ReturnVisualFields
	}
	return nil
}

func (x *ScanConfig) GetReturnDateFieldImages() *ScanConfig_ReturnDateFieldImages {
	if x != nil {
		return x.ReturnDateFieldImages
	}
	return nil
}

func (x *ScanConfig) GetReturnSexFieldImages() *ScanConfig_ReturnSexFieldImages {
	if x != nil {
		return x.ReturnSexFieldImages
	}
	return nil
}

func (x *ScanConfig) GetSkipDocumentDetection() bool {
	if x != nil {
		return x.SkipDocumentDetection
	}
	return false
}

// ScanDocumentRequest
type ScanDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// image jpeg data bytes. If using http gateway (rest w json) this is base64 encoded string of image jpeg bytes
	ImageJpeg []byte `protobuf:"bytes,1,opt,name=imageJpeg,proto3" json:"imageJpeg,omitempty"`
	// config - optional, this can be set to configure some server parameters and what do you want the server to
	// return. This includes selection of returning images, selecting fields etc.
	Config *ScanConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ScanDocumentRequest) Reset() {
	*x = ScanDocumentRequest{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanDocumentRequest) ProtoMessage() {}

func (x *ScanDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanDocumentRequest.ProtoReflect.Descriptor instead.
func (*ScanDocumentRequest) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ScanDocumentRequest) GetImageJpeg() []byte {
	if x != nil {
		return x.ImageJpeg
	}
	return nil
}

func (x *ScanDocumentRequest) GetConfig() *ScanConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Quad
type Quad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 float32 `protobuf:"fixed32,1,opt,name=x1,proto3" json:"x1,omitempty"`
	Y1 float32 `protobuf:"fixed32,2,opt,name=y1,proto3" json:"y1,omitempty"`
	X2 float32 `protobuf:"fixed32,3,opt,name=x2,proto3" json:"x2,omitempty"`
	Y2 float32 `protobuf:"fixed32,4,opt,name=y2,proto3" json:"y2,omitempty"`
	X3 float32 `protobuf:"fixed32,5,opt,name=x3,proto3" json:"x3,omitempty"`
	Y3 float32 `protobuf:"fixed32,6,opt,name=y3,proto3" json:"y3,omitempty"`
	X4 float32 `protobuf:"fixed32,7,opt,name=x4,proto3" json:"x4,omitempty"`
	Y4 float32 `protobuf:"fixed32,8,opt,name=y4,proto3" json:"y4,omitempty"`
}

func (x *Quad) Reset() {
	*x = Quad{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quad) ProtoMessage() {}

func (x *Quad) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quad.ProtoReflect.Descriptor instead.
func (*Quad) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *Quad) GetX1() float32 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *Quad) GetY1() float32 {
	if x != nil {
		return x.Y1
	}
	return 0
}

func (x *Quad) GetX2() float32 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *Quad) GetY2() float32 {
	if x != nil {
		return x.Y2
	}
	return 0
}

func (x *Quad) GetX3() float32 {
	if x != nil {
		return x.X3
	}
	return 0
}

func (x *Quad) GetY3() float32 {
	if x != nil {
		return x.Y3
	}
	return 0
}

func (x *Quad) GetX4() float32 {
	if x != nil {
		return x.X4
	}
	return 0
}

func (x *Quad) GetY4() float32 {
	if x != nil {
		return x.Y4
	}
	return 0
}

// MrzResult
type Mrz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mrz status
	Status Mrz_Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.ddx.v1.Mrz_Status" json:"status,omitempty"`
	// fields - data decoded from MRZ. Empty if status is STATUS_INVALID_FORMAT
	Fields *MrzFields `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	// "Raw" mrz code, value that we OCR-ed from the document and decoded in "fields" field.
	// Depending on MRZ type, this field will contain one, two or three string values.
	MrzCode []string `protobuf:"bytes,3,rep,name=mrz_code,json=mrzCode,proto3" json:"mrz_code,omitempty"`
}

func (x *Mrz) Reset() {
	*x = Mrz{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mrz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mrz) ProtoMessage() {}

func (x *Mrz) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mrz.ProtoReflect.Descriptor instead.
func (*Mrz) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *Mrz) GetStatus() Mrz_Status {
	if x != nil {
		return x.Status
	}
	return Mrz_STATUS_OK
}

func (x *Mrz) GetFields() *MrzFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Mrz) GetMrzCode() []string {
	if x != nil {
		return x.MrzCode
	}
	return nil
}

// ScanDocumentResponse
type ScanDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ScanDocumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.ddx.v1.ScanDocumentResponse_Status" json:"status,omitempty"`
	// detection is a quadrilateral of detected document in given Request image.
	// will be empty if status is DOCUMENT_NOT_FOUND
	Detection *Quad `protobuf:"bytes,2,opt,name=detection,proto3" json:"detection,omitempty"`
	// classification holds detected document class. Will be empty if status is not OK
	Classification *DocumentClass `protobuf:"bytes,3,opt,name=classification,proto3" json:"classification,omitempty"`
	// data holds all information extracted from the document
	// It will be empty if status is STATUS_DOCUMENT_NOT_FOUND
	Data *DocumentData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScanDocumentResponse) Reset() {
	*x = ScanDocumentResponse{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanDocumentResponse) ProtoMessage() {}

func (x *ScanDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanDocumentResponse.ProtoReflect.Descriptor instead.
func (*ScanDocumentResponse) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ScanDocumentResponse) GetStatus() ScanDocumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return ScanDocumentResponse_STATUS_OK
}

func (x *ScanDocumentResponse) GetDetection() *Quad {
	if x != nil {
		return x.Detection
	}
	return nil
}

func (x *ScanDocumentResponse) GetClassification() *DocumentClass {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *ScanDocumentResponse) GetData() *DocumentData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DocumentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field holds detected document textual fields.
	// Textual fields are all the fields that have textual representation and we expect
	// out users to use the OCRed and transcribed text.
	// Will be empty if status is not OK
	TextField []*TextField `protobuf:"bytes,1,rep,name=textField,proto3" json:"textField,omitempty"`
	// visualField holds detected document visual fields.
	// Visual fields are those whose values can't be extracted as text, and are
	// expected to be extracted as an image or position in the given image.
	VisualField []*VisualField `protobuf:"bytes,2,rep,name=visualField,proto3" json:"visualField,omitempty"`
	// dateField holds detected document date fields.
	// Compared to textual fields, they don't just hold textual information present on the document
	// but offer "date" in a structured parsed format (year, month, day) regardless of textual
	// representation.
	DateField []*DateField `protobuf:"bytes,3,rep,name=dateField,proto3" json:"dateField,omitempty"`
	// sexField holds detected document gender fields
	// Compared to textual fields, they don't just hold textual information present on the document
	// but offer gender information as an parsed enumeration.
	SexField []*SexField `protobuf:"bytes,4,rep,name=sexField,proto3" json:"sexField,omitempty"`
	// mrz holds the mrz data extracted from the image if one was found, empty otherwise
	Mrz *Mrz `protobuf:"bytes,5,opt,name=mrz,proto3" json:"mrz,omitempty"`
	// pdf417Barcode - holds data extracted from PDF417 barcode detected on the document if one was found, empty otherwise
	Pdf417Barcode *Pdf417Barcode `protobuf:"bytes,6,opt,name=pdf417Barcode,proto3" json:"pdf417Barcode,omitempty"`
	// Optional, empty by default, returned if specified in requests "config" field.
	// Of course, it will be empty if status is DOCUMENT_NOT_FOUND
	DocumentImage []byte `protobuf:"bytes,7,opt,name=documentImage,proto3" json:"documentImage,omitempty"`
}

func (x *DocumentData) Reset() {
	*x = DocumentData{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentData) ProtoMessage() {}

func (x *DocumentData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentData.ProtoReflect.Descriptor instead.
func (*DocumentData) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *DocumentData) GetTextField() []*TextField {
	if x != nil {
		return x.TextField
	}
	return nil
}

func (x *DocumentData) GetVisualField() []*VisualField {
	if x != nil {
		return x.VisualField
	}
	return nil
}

func (x *DocumentData) GetDateField() []*DateField {
	if x != nil {
		return x.DateField
	}
	return nil
}

func (x *DocumentData) GetSexField() []*SexField {
	if x != nil {
		return x.SexField
	}
	return nil
}

func (x *DocumentData) GetMrz() *Mrz {
	if x != nil {
		return x.Mrz
	}
	return nil
}

func (x *DocumentData) GetPdf417Barcode() *Pdf417Barcode {
	if x != nil {
		return x.Pdf417Barcode
	}
	return nil
}

func (x *DocumentData) GetDocumentImage() []byte {
	if x != nil {
		return x.DocumentImage
	}
	return nil
}

type ScanTwoSidedDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// image jpeg data bytes. If using http gateway (rest w json) this is base64 encoded string of image jpeg bytes
	FirstImage []byte `protobuf:"bytes,1,opt,name=firstImage,proto3" json:"firstImage,omitempty"`
	// image jpeg data bytes. If using http gateway (rest w json) this is base64 encoded string of image jpeg bytes
	SecondImage []byte `protobuf:"bytes,2,opt,name=secondImage,proto3" json:"secondImage,omitempty"`
	// config - optional, this can be set to configure some server parameters and what do you want the server to
	// return. This includes selection of returning images, selecting fields etc.
	Config *ScanConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ScanTwoSidedDocumentRequest) Reset() {
	*x = ScanTwoSidedDocumentRequest{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanTwoSidedDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanTwoSidedDocumentRequest) ProtoMessage() {}

func (x *ScanTwoSidedDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanTwoSidedDocumentRequest.ProtoReflect.Descriptor instead.
func (*ScanTwoSidedDocumentRequest) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *ScanTwoSidedDocumentRequest) GetFirstImage() []byte {
	if x != nil {
		return x.FirstImage
	}
	return nil
}

func (x *ScanTwoSidedDocumentRequest) GetSecondImage() []byte {
	if x != nil {
		return x.SecondImage
	}
	return nil
}

func (x *ScanTwoSidedDocumentRequest) GetConfig() *ScanConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ScanTwoSidedDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ScanTwoSidedDocumentResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.ddx.v1.ScanTwoSidedDocumentResponse_Status" json:"status,omitempty"`
	// classification holds detected document class. Will be empty if status is STATUS_FRONT_SIDE_NOT_FOUND or STATUS_NOT_SUPPORTED
	Classification *DocumentClass `protobuf:"bytes,2,opt,name=classification,proto3" json:"classification,omitempty"`
	// frontSide holds data extracted from the image of document front side. Empty if STATUS_FRONT_SIDE_NOT_FOUND
	FrontSide *DocumentData `protobuf:"bytes,3,opt,name=frontSide,proto3" json:"frontSide,omitempty"`
	// backSide holds data extracted from the image of document back side. Empty if STATUS_BACK_SIDE_NOT_FOUND
	BackSide *DocumentData `protobuf:"bytes,4,opt,name=backSide,proto3" json:"backSide,omitempty"`
}

func (x *ScanTwoSidedDocumentResponse) Reset() {
	*x = ScanTwoSidedDocumentResponse{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanTwoSidedDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanTwoSidedDocumentResponse) ProtoMessage() {}

func (x *ScanTwoSidedDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanTwoSidedDocumentResponse.ProtoReflect.Descriptor instead.
func (*ScanTwoSidedDocumentResponse) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *ScanTwoSidedDocumentResponse) GetStatus() ScanTwoSidedDocumentResponse_Status {
	if x != nil {
		return x.Status
	}
	return ScanTwoSidedDocumentResponse_STATUS_OK
}

func (x *ScanTwoSidedDocumentResponse) GetClassification() *DocumentClass {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *ScanTwoSidedDocumentResponse) GetFrontSide() *DocumentData {
	if x != nil {
		return x.FrontSide
	}
	return nil
}

func (x *ScanTwoSidedDocumentResponse) GetBackSide() *DocumentData {
	if x != nil {
		return x.BackSide
	}
	return nil
}

// ImgResolution - used to define the resolution of the returning image.
// If only one dimension is set (only one of height or width) the other will be
// computed whilst maintaining the detections aspect ratio.
// Max target resolution is bound by input image resolution (won't upscale the detected image
// if you specified resolution greater then input image).
type ScanConfig_ImgResolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// width or "columns" of an image.
	Width uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	// height or "rows" of an image.
	Height uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ScanConfig_ImgResolution) Reset() {
	*x = ScanConfig_ImgResolution{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanConfig_ImgResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfig_ImgResolution) ProtoMessage() {}

func (x *ScanConfig_ImgResolution) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfig_ImgResolution.ProtoReflect.Descriptor instead.
func (*ScanConfig_ImgResolution) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ScanConfig_ImgResolution) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ScanConfig_ImgResolution) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// ReturnImage - used to specify parameters for the returned image.
type ScanConfig_ReturnImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the resolution you want the returning image to have. If left empty we use predefined server value.
	// if the resolution is greater then the available input image, we do not upscale the result, but
	// rather use the largest possible resolution available in your input image.
	TargetResolution *ScanConfig_ImgResolution `protobuf:"bytes,1,opt,name=targetResolution,proto3" json:"targetResolution,omitempty"`
	// Image is returned as an encoded jpeg, this is the parameter used for jpeg compression.
	// If left undefined, we use the default value of 80.
	JpegImageQuality uint32 `protobuf:"varint,2,opt,name=jpegImageQuality,proto3" json:"jpegImageQuality,omitempty"`
}

func (x *ScanConfig_ReturnImage) Reset() {
	*x = ScanConfig_ReturnImage{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanConfig_ReturnImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfig_ReturnImage) ProtoMessage() {}

func (x *ScanConfig_ReturnImage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfig_ReturnImage.ProtoReflect.Descriptor instead.
func (*ScanConfig_ReturnImage) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ScanConfig_ReturnImage) GetTargetResolution() *ScanConfig_ImgResolution {
	if x != nil {
		return x.TargetResolution
	}
	return nil
}

func (x *ScanConfig_ReturnImage) GetJpegImageQuality() uint32 {
	if x != nil {
		return x.JpegImageQuality
	}
	return 0
}

// ReturnTextFieldImages - used to specify to the server to return images of fields
// detected on the document (select type of interest using targetTypes field).
// Unless this is a HARD REQUIREMENT we do not recommend to use this due to its
// computational and data overhead.
type ScanConfig_ReturnTextFieldImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// typeFilter - only images of specified field types are returned.
	// if left empty, all field type images will be returned.
	TypeFilter []TextField_Type `protobuf:"varint,1,rep,packed,name=typeFilter,proto3,enum=proto.ddx.v1.TextField_Type" json:"typeFilter,omitempty"`
	// Image is returned as encoded jpeg, this is the parameter used for jpeg compression.
	// If left undefined, we use the default value of 80.
	JpegImageQuality uint32 `protobuf:"varint,2,opt,name=jpegImageQuality,proto3" json:"jpegImageQuality,omitempty"`
}

func (x *ScanConfig_ReturnTextFieldImages) Reset() {
	*x = ScanConfig_ReturnTextFieldImages{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanConfig_ReturnTextFieldImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfig_ReturnTextFieldImages) ProtoMessage() {}

func (x *ScanConfig_ReturnTextFieldImages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfig_ReturnTextFieldImages.ProtoReflect.Descriptor instead.
func (*ScanConfig_ReturnTextFieldImages) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ScanConfig_ReturnTextFieldImages) GetTypeFilter() []TextField_Type {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

func (x *ScanConfig_ReturnTextFieldImages) GetJpegImageQuality() uint32 {
	if x != nil {
		return x.JpegImageQuality
	}
	return 0
}

type ScanConfig_ReturnDateFieldImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// typeFilter - only images of specified field types are returned.
	// if left empty, all field type images will be returned.
	TypeFilter []DateField_Type `protobuf:"varint,1,rep,packed,name=typeFilter,proto3,enum=proto.ddx.v1.DateField_Type" json:"typeFilter,omitempty"`
	// Image is returned as encoded jpeg, this is the parameter used for jpeg compression.
	// If left undefined, we use the default value of 80.
	JpegImageQuality uint32 `protobuf:"varint,2,opt,name=jpegImageQuality,proto3" json:"jpegImageQuality,omitempty"`
}

func (x *ScanConfig_ReturnDateFieldImages) Reset() {
	*x = ScanConfig_ReturnDateFieldImages{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanConfig_ReturnDateFieldImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfig_ReturnDateFieldImages) ProtoMessage() {}

func (x *ScanConfig_ReturnDateFieldImages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfig_ReturnDateFieldImages.ProtoReflect.Descriptor instead.
func (*ScanConfig_ReturnDateFieldImages) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{1, 3}
}

func (x *ScanConfig_ReturnDateFieldImages) GetTypeFilter() []DateField_Type {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

func (x *ScanConfig_ReturnDateFieldImages) GetJpegImageQuality() uint32 {
	if x != nil {
		return x.JpegImageQuality
	}
	return 0
}

// ReturnVisualFields - specify visual fields to return.
type ScanConfig_ReturnVisualFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// typeFilter - used to specify to the server to return visual fields of specified types.
	// if left empty, all visual field types will be returned.
	TypeFilter []VisualField_Type `protobuf:"varint,1,rep,packed,name=typeFilter,proto3,enum=proto.ddx.v1.VisualField_Type" json:"typeFilter,omitempty"`
	// jpegImageQuality - if left undefined, we use the default value of 80.
	JpegImageQuality uint32 `protobuf:"varint,2,opt,name=jpegImageQuality,proto3" json:"jpegImageQuality,omitempty"`
}

func (x *ScanConfig_ReturnVisualFields) Reset() {
	*x = ScanConfig_ReturnVisualFields{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanConfig_ReturnVisualFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfig_ReturnVisualFields) ProtoMessage() {}

func (x *ScanConfig_ReturnVisualFields) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfig_ReturnVisualFields.ProtoReflect.Descriptor instead.
func (*ScanConfig_ReturnVisualFields) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{1, 4}
}

func (x *ScanConfig_ReturnVisualFields) GetTypeFilter() []VisualField_Type {
	if x != nil {
		return x.TypeFilter
	}
	return nil
}

func (x *ScanConfig_ReturnVisualFields) GetJpegImageQuality() uint32 {
	if x != nil {
		return x.JpegImageQuality
	}
	return 0
}

type ScanConfig_ReturnSexFieldImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image is returned as encoded jpeg, this is the parameter used for jpeg compression.
	// If left undefined, we use the default value of 80.
	JpegImageQuality uint32 `protobuf:"varint,1,opt,name=jpegImageQuality,proto3" json:"jpegImageQuality,omitempty"`
}

func (x *ScanConfig_ReturnSexFieldImages) Reset() {
	*x = ScanConfig_ReturnSexFieldImages{}
	mi := &file_proto_ddx_v1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScanConfig_ReturnSexFieldImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfig_ReturnSexFieldImages) ProtoMessage() {}

func (x *ScanConfig_ReturnSexFieldImages) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfig_ReturnSexFieldImages.ProtoReflect.Descriptor instead.
func (*ScanConfig_ReturnSexFieldImages) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_service_proto_rawDescGZIP(), []int{1, 5}
}

func (x *ScanConfig_ReturnSexFieldImages) GetJpegImageQuality() uint32 {
	if x != nil {
		return x.JpegImageQuality
	}
	return 0
}

var File_proto_ddx_v1_service_proto protoreflect.FileDescriptor

var file_proto_ddx_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x64, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x64, 0x78, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x64, 0x78, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x64, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x64, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x72,
	0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64,
	0x64, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x64, 0x78, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7,
	0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x74,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xc4, 0x09, 0x0a, 0x0a, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x64, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x15,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x12,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x64, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x78,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73,
	0x6b, 0x69, 0x70, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x6b, 0x69, 0x70,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x3d, 0x0a, 0x0d, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x1a, 0x8d, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x52, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6a, 0x70, 0x65, 0x67, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6a, 0x70, 0x65, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x1a, 0x81, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6a, 0x70, 0x65, 0x67,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6a, 0x70, 0x65, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x1a, 0x81, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x6a, 0x70, 0x65, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a, 0x70, 0x65, 0x67, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x80, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x3e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x6a, 0x70, 0x65, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a, 0x70, 0x65, 0x67, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x42, 0x0a, 0x14, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6a, 0x70, 0x65, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a,
	0x70, 0x65, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0x65, 0x0a, 0x13, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a,
	0x70, 0x65, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x4a, 0x70, 0x65, 0x67, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x04, 0x51, 0x75, 0x61, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x78, 0x31, 0x12,
	0x0e, 0x0a, 0x02, 0x79, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x79, 0x31, 0x12,
	0x0e, 0x0a, 0x02, 0x78, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x78, 0x32, 0x12,
	0x0e, 0x0a, 0x02, 0x79, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x79, 0x32, 0x12,
	0x0e, 0x0a, 0x02, 0x78, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x78, 0x33, 0x12,
	0x0e, 0x0a, 0x02, 0x79, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x79, 0x33, 0x12,
	0x0e, 0x0a, 0x02, 0x78, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x78, 0x34, 0x12,
	0x0e, 0x0a, 0x02, 0x79, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x79, 0x34, 0x22,
	0xd7, 0x01, 0x0a, 0x03, 0x4d, 0x72, 0x7a, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x7a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x72, 0x7a, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x72,
	0x7a, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x72,
	0x7a, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02, 0x22, 0xfa, 0x02, 0x0a, 0x14, 0x53, 0x63,
	0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61, 0x64, 0x52, 0x09, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0e, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x10, 0x03, 0x22, 0xfb, 0x02, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x73, 0x65,
	0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x03, 0x6d, 0x72, 0x7a, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x72, 0x7a, 0x52, 0x03, 0x6d, 0x72, 0x7a, 0x12, 0x41, 0x0a, 0x0d, 0x70,
	0x64, 0x66, 0x34, 0x31, 0x37, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x66, 0x34, 0x31, 0x37, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x0d, 0x70, 0x64, 0x66, 0x34, 0x31, 0x37, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x77, 0x6f,
	0x53, 0x69, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x94, 0x03, 0x0a, 0x1c, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x77, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x77, 0x6f,
	0x53, 0x69, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x53, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x4b, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x32,
	0x8d, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e,
	0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a,
	0x22, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x12, 0x8e,
	0x01, 0x0a, 0x14, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x77, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x77, 0x6f, 0x53, 0x69,
	0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x77, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x77, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x64, 0x42,
	0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65,
	0x72, 0x69, 0x64, 0x69, 0x6c, 0x2f, 0x69, 0x64, 0x2d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64,
	0x64, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ddx_v1_service_proto_rawDescOnce sync.Once
	file_proto_ddx_v1_service_proto_rawDescData = file_proto_ddx_v1_service_proto_rawDesc
)

func file_proto_ddx_v1_service_proto_rawDescGZIP() []byte {
	file_proto_ddx_v1_service_proto_rawDescOnce.Do(func() {
		file_proto_ddx_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ddx_v1_service_proto_rawDescData)
	})
	return file_proto_ddx_v1_service_proto_rawDescData
}

var file_proto_ddx_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_ddx_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_proto_ddx_v1_service_proto_goTypes = []any{
	(Mrz_Status)(0),                          // 0: proto.ddx.v1.Mrz.Status
	(ScanDocumentResponse_Status)(0),         // 1: proto.ddx.v1.ScanDocumentResponse.Status
	(ScanTwoSidedDocumentResponse_Status)(0), // 2: proto.ddx.v1.ScanTwoSidedDocumentResponse.Status
	(*DocumentClass)(nil),                    // 3: proto.ddx.v1.DocumentClass
	(*ScanConfig)(nil),                       // 4: proto.ddx.v1.ScanConfig
	(*ScanDocumentRequest)(nil),              // 5: proto.ddx.v1.ScanDocumentRequest
	(*Quad)(nil),                             // 6: proto.ddx.v1.Quad
	(*Mrz)(nil),                              // 7: proto.ddx.v1.Mrz
	(*ScanDocumentResponse)(nil),             // 8: proto.ddx.v1.ScanDocumentResponse
	(*DocumentData)(nil),                     // 9: proto.ddx.v1.DocumentData
	(*ScanTwoSidedDocumentRequest)(nil),      // 10: proto.ddx.v1.ScanTwoSidedDocumentRequest
	(*ScanTwoSidedDocumentResponse)(nil),     // 11: proto.ddx.v1.ScanTwoSidedDocumentResponse
	(*ScanConfig_ImgResolution)(nil),         // 12: proto.ddx.v1.ScanConfig.ImgResolution
	(*ScanConfig_ReturnImage)(nil),           // 13: proto.ddx.v1.ScanConfig.ReturnImage
	(*ScanConfig_ReturnTextFieldImages)(nil), // 14: proto.ddx.v1.ScanConfig.ReturnTextFieldImages
	(*ScanConfig_ReturnDateFieldImages)(nil), // 15: proto.ddx.v1.ScanConfig.ReturnDateFieldImages
	(*ScanConfig_ReturnVisualFields)(nil),    // 16: proto.ddx.v1.ScanConfig.ReturnVisualFields
	(*ScanConfig_ReturnSexFieldImages)(nil),  // 17: proto.ddx.v1.ScanConfig.ReturnSexFieldImages
	(DocumentType)(0),                        // 18: proto.ddx.v1.DocumentType
	(Country)(0),                             // 19: proto.ddx.v1.Country
	(Territory)(0),                           // 20: proto.ddx.v1.Territory
	(*MrzFields)(nil),                        // 21: proto.ddx.v1.MrzFields
	(*TextField)(nil),                        // 22: proto.ddx.v1.TextField
	(*VisualField)(nil),                      // 23: proto.ddx.v1.VisualField
	(*DateField)(nil),                        // 24: proto.ddx.v1.DateField
	(*SexField)(nil),                         // 25: proto.ddx.v1.SexField
	(*Pdf417Barcode)(nil),                    // 26: proto.ddx.v1.Pdf417Barcode
	(TextField_Type)(0),                      // 27: proto.ddx.v1.TextField.Type
	(DateField_Type)(0),                      // 28: proto.ddx.v1.DateField.Type
	(VisualField_Type)(0),                    // 29: proto.ddx.v1.VisualField.Type
}
var file_proto_ddx_v1_service_proto_depIdxs = []int32{
	18, // 0: proto.ddx.v1.DocumentClass.type:type_name -> proto.ddx.v1.DocumentType
	19, // 1: proto.ddx.v1.DocumentClass.country:type_name -> proto.ddx.v1.Country
	20, // 2: proto.ddx.v1.DocumentClass.territory:type_name -> proto.ddx.v1.Territory
	13, // 3: proto.ddx.v1.ScanConfig.returnDocumentImage:type_name -> proto.ddx.v1.ScanConfig.ReturnImage
	14, // 4: proto.ddx.v1.ScanConfig.returnTextFieldImages:type_name -> proto.ddx.v1.ScanConfig.ReturnTextFieldImages
	16, // 5: proto.ddx.v1.ScanConfig.returnVisualFields:type_name -> proto.ddx.v1.ScanConfig.ReturnVisualFields
	15, // 6: proto.ddx.v1.ScanConfig.returnDateFieldImages:type_name -> proto.ddx.v1.ScanConfig.ReturnDateFieldImages
	17, // 7: proto.ddx.v1.ScanConfig.returnSexFieldImages:type_name -> proto.ddx.v1.ScanConfig.ReturnSexFieldImages
	4,  // 8: proto.ddx.v1.ScanDocumentRequest.config:type_name -> proto.ddx.v1.ScanConfig
	0,  // 9: proto.ddx.v1.Mrz.status:type_name -> proto.ddx.v1.Mrz.Status
	21, // 10: proto.ddx.v1.Mrz.fields:type_name -> proto.ddx.v1.MrzFields
	1,  // 11: proto.ddx.v1.ScanDocumentResponse.status:type_name -> proto.ddx.v1.ScanDocumentResponse.Status
	6,  // 12: proto.ddx.v1.ScanDocumentResponse.detection:type_name -> proto.ddx.v1.Quad
	3,  // 13: proto.ddx.v1.ScanDocumentResponse.classification:type_name -> proto.ddx.v1.DocumentClass
	9,  // 14: proto.ddx.v1.ScanDocumentResponse.data:type_name -> proto.ddx.v1.DocumentData
	22, // 15: proto.ddx.v1.DocumentData.textField:type_name -> proto.ddx.v1.TextField
	23, // 16: proto.ddx.v1.DocumentData.visualField:type_name -> proto.ddx.v1.VisualField
	24, // 17: proto.ddx.v1.DocumentData.dateField:type_name -> proto.ddx.v1.DateField
	25, // 18: proto.ddx.v1.DocumentData.sexField:type_name -> proto.ddx.v1.SexField
	7,  // 19: proto.ddx.v1.DocumentData.mrz:type_name -> proto.ddx.v1.Mrz
	26, // 20: proto.ddx.v1.DocumentData.pdf417Barcode:type_name -> proto.ddx.v1.Pdf417Barcode
	4,  // 21: proto.ddx.v1.ScanTwoSidedDocumentRequest.config:type_name -> proto.ddx.v1.ScanConfig
	2,  // 22: proto.ddx.v1.ScanTwoSidedDocumentResponse.status:type_name -> proto.ddx.v1.ScanTwoSidedDocumentResponse.Status
	3,  // 23: proto.ddx.v1.ScanTwoSidedDocumentResponse.classification:type_name -> proto.ddx.v1.DocumentClass
	9,  // 24: proto.ddx.v1.ScanTwoSidedDocumentResponse.frontSide:type_name -> proto.ddx.v1.DocumentData
	9,  // 25: proto.ddx.v1.ScanTwoSidedDocumentResponse.backSide:type_name -> proto.ddx.v1.DocumentData
	12, // 26: proto.ddx.v1.ScanConfig.ReturnImage.targetResolution:type_name -> proto.ddx.v1.ScanConfig.ImgResolution
	27, // 27: proto.ddx.v1.ScanConfig.ReturnTextFieldImages.typeFilter:type_name -> proto.ddx.v1.TextField.Type
	28, // 28: proto.ddx.v1.ScanConfig.ReturnDateFieldImages.typeFilter:type_name -> proto.ddx.v1.DateField.Type
	29, // 29: proto.ddx.v1.ScanConfig.ReturnVisualFields.typeFilter:type_name -> proto.ddx.v1.VisualField.Type
	5,  // 30: proto.ddx.v1.Extraction.ScanDocument:input_type -> proto.ddx.v1.ScanDocumentRequest
	10, // 31: proto.ddx.v1.Extraction.ScanTwoSidedDocument:input_type -> proto.ddx.v1.ScanTwoSidedDocumentRequest
	8,  // 32: proto.ddx.v1.Extraction.ScanDocument:output_type -> proto.ddx.v1.ScanDocumentResponse
	11, // 33: proto.ddx.v1.Extraction.ScanTwoSidedDocument:output_type -> proto.ddx.v1.ScanTwoSidedDocumentResponse
	32, // [32:34] is the sub-list for method output_type
	30, // [30:32] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_proto_ddx_v1_service_proto_init() }
func file_proto_ddx_v1_service_proto_init() {
	if File_proto_ddx_v1_service_proto != nil {
		return
	}
	file_proto_ddx_v1_countries_enum_proto_init()
	file_proto_ddx_v1_document_types_enum_proto_init()
	file_proto_ddx_v1_territory_enum_proto_init()
	file_proto_ddx_v1_mrz_proto_init()
	file_proto_ddx_v1_barcode_proto_init()
	file_proto_ddx_v1_fields_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ddx_v1_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ddx_v1_service_proto_goTypes,
		DependencyIndexes: file_proto_ddx_v1_service_proto_depIdxs,
		EnumInfos:         file_proto_ddx_v1_service_proto_enumTypes,
		MessageInfos:      file_proto_ddx_v1_service_proto_msgTypes,
	}.Build()
	File_proto_ddx_v1_service_proto = out.File
	file_proto_ddx_v1_service_proto_rawDesc = nil
	file_proto_ddx_v1_service_proto_goTypes = nil
	file_proto_ddx_v1_service_proto_depIdxs = nil
}
