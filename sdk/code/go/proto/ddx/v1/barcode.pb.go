// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: proto/ddx/v1/barcode.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OptionalFieldType enumeration for optional fields.
type Pdf417Barcode_OptionalFieldType int32

const (
	// Represents second line of street portion.
	// DAH
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_ADDRESS_STREET_2 Pdf417Barcode_OptionalFieldType = 0
	// Indicates hair color of cardholder.
	// DAZ
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_HAIR_COLOR Pdf417Barcode_OptionalFieldType = 1
	// Denotes country and municipality/state/province where born.
	// DCI
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_PLACE_OF_BIRTH Pdf417Barcode_OptionalFieldType = 2
	// Identifies when, where, and by whom ID was made.
	// DCJ
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_AUDIT_INFORMATION Pdf417Barcode_OptionalFieldType = 3
	// String affixed to raw materials used in production.
	// DCK
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_INVENTORY_CONTROL_NUMBER Pdf417Barcode_OptionalFieldType = 4
	// Represents other family names by which known.
	// DBN
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_ALIAS_FAMILY_NAME Pdf417Barcode_OptionalFieldType = 5
	// Indicates other given names by which known.
	// DBG
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_ALIAS_GIVEN_NAME Pdf417Barcode_OptionalFieldType = 6
	// Represents other suffixes by which known.
	// DBS
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_ALIAS_SUFFIX_NAME Pdf417Barcode_OptionalFieldType = 7
	// Indicates suffix for name (e.g., Jr, Sr).
	// DCU
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_NAME_SUFFIX Pdf417Barcode_OptionalFieldType = 8
	// Approximate weight range of cardholder.
	// DCE
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_PHYSICAL_DESCRIPTION_WEIGHT_RANGE Pdf417Barcode_OptionalFieldType = 9
	// Codes for race or ethnicity as defined in AAMVA D20.
	// DCL
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_RACE_ETHNICITY Pdf417Barcode_OptionalFieldType = 10
	// Standard vehicle classification codes.
	// DCM
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_STANDARD_VEHICLE_CLASSIFICATION Pdf417Barcode_OptionalFieldType = 11
	// Standard endorsement codes for cardholder.
	// DCN
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_STANDARD_ENDORSEMENT_CODE Pdf417Barcode_OptionalFieldType = 12
	// Standard restriction codes for cardholder.
	// DCO
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_STANDARD_RESTRICTION_CODE Pdf417Barcode_OptionalFieldType = 13
	// Text explaining jurisdiction-specific vehicle classification codes.
	// DCP
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_JURISDICTION_SPECIFIC_VEHICLE_CLASSIFICATION_DESCRIPTION Pdf417Barcode_OptionalFieldType = 14
	// Text explaining jurisdiction-specific endorsement codes.
	// DCQ
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_JURISDICTION_SPECIFIC_ENDORSEMENT_CODE_DESCRIPTION Pdf417Barcode_OptionalFieldType = 15
	// Text describing jurisdiction-specific restriction codes.
	// DCR
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_JURISDICTION_SPECIFIC_RESTRICTION_CODE_DESCRIPTION Pdf417Barcode_OptionalFieldType = 16
	// Indicates compliance status (“F”=compliant; “N”=non-compliant).
	// DDA
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_COMPLIANCE_TYPE Pdf417Barcode_OptionalFieldType = 17
	// Date of most recent version change to DL/ID format.
	// DDB
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_CARD_REVISION_DATE Pdf417Barcode_OptionalFieldType = 18
	// When hazardous material endorsement expires.
	// DDC
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_HAZMAT_ENDORSEMENT_EXPIRATION_DATE Pdf417Barcode_OptionalFieldType = 19
	// Indicates temporary lawful status (“1”).
	// DDD
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_LIMITED_DURATION_DOCUMENT_INDICATOR Pdf417Barcode_OptionalFieldType = 20
	// Cardholder's weight in pounds.
	// DAW
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_WEIGHT_POUNDS Pdf417Barcode_OptionalFieldType = 21
	// Cardholder's weight in kilograms.
	// DAX
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_WEIGHT_KILOGRAMS Pdf417Barcode_OptionalFieldType = 22
	// Date when cardholder turns 18 years old.
	// DDH
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_UNDER_18_UNTIL_DATE Pdf417Barcode_OptionalFieldType = 23
	// Date when cardholder turns 19 years old.
	// DDI
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_UNDER_19_UNTIL_DATE Pdf417Barcode_OptionalFieldType = 24
	// Date when cardholder turns 21 years old.
	// DDJ
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_UNDER_21_UNTIL_DATE Pdf417Barcode_OptionalFieldType = 25
	// Indicates organ donor status (“1”).
	// DDK
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_ORGAN_DONOR_INDICATOR Pdf417Barcode_OptionalFieldType = 26
	// Indicates veteran status (“1”).
	// DDL
	Pdf417Barcode_OPTIONAL_FIELD_TYPE_VETERAN_INDICATOR Pdf417Barcode_OptionalFieldType = 27
)

// Enum value maps for Pdf417Barcode_OptionalFieldType.
var (
	Pdf417Barcode_OptionalFieldType_name = map[int32]string{
		0:  "OPTIONAL_FIELD_TYPE_ADDRESS_STREET_2",
		1:  "OPTIONAL_FIELD_TYPE_HAIR_COLOR",
		2:  "OPTIONAL_FIELD_TYPE_PLACE_OF_BIRTH",
		3:  "OPTIONAL_FIELD_TYPE_AUDIT_INFORMATION",
		4:  "OPTIONAL_FIELD_TYPE_INVENTORY_CONTROL_NUMBER",
		5:  "OPTIONAL_FIELD_TYPE_ALIAS_FAMILY_NAME",
		6:  "OPTIONAL_FIELD_TYPE_ALIAS_GIVEN_NAME",
		7:  "OPTIONAL_FIELD_TYPE_ALIAS_SUFFIX_NAME",
		8:  "OPTIONAL_FIELD_TYPE_NAME_SUFFIX",
		9:  "OPTIONAL_FIELD_TYPE_PHYSICAL_DESCRIPTION_WEIGHT_RANGE",
		10: "OPTIONAL_FIELD_TYPE_RACE_ETHNICITY",
		11: "OPTIONAL_FIELD_TYPE_STANDARD_VEHICLE_CLASSIFICATION",
		12: "OPTIONAL_FIELD_TYPE_STANDARD_ENDORSEMENT_CODE",
		13: "OPTIONAL_FIELD_TYPE_STANDARD_RESTRICTION_CODE",
		14: "OPTIONAL_FIELD_TYPE_JURISDICTION_SPECIFIC_VEHICLE_CLASSIFICATION_DESCRIPTION",
		15: "OPTIONAL_FIELD_TYPE_JURISDICTION_SPECIFIC_ENDORSEMENT_CODE_DESCRIPTION",
		16: "OPTIONAL_FIELD_TYPE_JURISDICTION_SPECIFIC_RESTRICTION_CODE_DESCRIPTION",
		17: "OPTIONAL_FIELD_TYPE_COMPLIANCE_TYPE",
		18: "OPTIONAL_FIELD_TYPE_CARD_REVISION_DATE",
		19: "OPTIONAL_FIELD_TYPE_HAZMAT_ENDORSEMENT_EXPIRATION_DATE",
		20: "OPTIONAL_FIELD_TYPE_LIMITED_DURATION_DOCUMENT_INDICATOR",
		21: "OPTIONAL_FIELD_TYPE_WEIGHT_POUNDS",
		22: "OPTIONAL_FIELD_TYPE_WEIGHT_KILOGRAMS",
		23: "OPTIONAL_FIELD_TYPE_UNDER_18_UNTIL_DATE",
		24: "OPTIONAL_FIELD_TYPE_UNDER_19_UNTIL_DATE",
		25: "OPTIONAL_FIELD_TYPE_UNDER_21_UNTIL_DATE",
		26: "OPTIONAL_FIELD_TYPE_ORGAN_DONOR_INDICATOR",
		27: "OPTIONAL_FIELD_TYPE_VETERAN_INDICATOR",
	}
	Pdf417Barcode_OptionalFieldType_value = map[string]int32{
		"OPTIONAL_FIELD_TYPE_ADDRESS_STREET_2":                                         0,
		"OPTIONAL_FIELD_TYPE_HAIR_COLOR":                                               1,
		"OPTIONAL_FIELD_TYPE_PLACE_OF_BIRTH":                                           2,
		"OPTIONAL_FIELD_TYPE_AUDIT_INFORMATION":                                        3,
		"OPTIONAL_FIELD_TYPE_INVENTORY_CONTROL_NUMBER":                                 4,
		"OPTIONAL_FIELD_TYPE_ALIAS_FAMILY_NAME":                                        5,
		"OPTIONAL_FIELD_TYPE_ALIAS_GIVEN_NAME":                                         6,
		"OPTIONAL_FIELD_TYPE_ALIAS_SUFFIX_NAME":                                        7,
		"OPTIONAL_FIELD_TYPE_NAME_SUFFIX":                                              8,
		"OPTIONAL_FIELD_TYPE_PHYSICAL_DESCRIPTION_WEIGHT_RANGE":                        9,
		"OPTIONAL_FIELD_TYPE_RACE_ETHNICITY":                                           10,
		"OPTIONAL_FIELD_TYPE_STANDARD_VEHICLE_CLASSIFICATION":                          11,
		"OPTIONAL_FIELD_TYPE_STANDARD_ENDORSEMENT_CODE":                                12,
		"OPTIONAL_FIELD_TYPE_STANDARD_RESTRICTION_CODE":                                13,
		"OPTIONAL_FIELD_TYPE_JURISDICTION_SPECIFIC_VEHICLE_CLASSIFICATION_DESCRIPTION": 14,
		"OPTIONAL_FIELD_TYPE_JURISDICTION_SPECIFIC_ENDORSEMENT_CODE_DESCRIPTION":       15,
		"OPTIONAL_FIELD_TYPE_JURISDICTION_SPECIFIC_RESTRICTION_CODE_DESCRIPTION":       16,
		"OPTIONAL_FIELD_TYPE_COMPLIANCE_TYPE":                                          17,
		"OPTIONAL_FIELD_TYPE_CARD_REVISION_DATE":                                       18,
		"OPTIONAL_FIELD_TYPE_HAZMAT_ENDORSEMENT_EXPIRATION_DATE":                       19,
		"OPTIONAL_FIELD_TYPE_LIMITED_DURATION_DOCUMENT_INDICATOR":                      20,
		"OPTIONAL_FIELD_TYPE_WEIGHT_POUNDS":                                            21,
		"OPTIONAL_FIELD_TYPE_WEIGHT_KILOGRAMS":                                         22,
		"OPTIONAL_FIELD_TYPE_UNDER_18_UNTIL_DATE":                                      23,
		"OPTIONAL_FIELD_TYPE_UNDER_19_UNTIL_DATE":                                      24,
		"OPTIONAL_FIELD_TYPE_UNDER_21_UNTIL_DATE":                                      25,
		"OPTIONAL_FIELD_TYPE_ORGAN_DONOR_INDICATOR":                                    26,
		"OPTIONAL_FIELD_TYPE_VETERAN_INDICATOR":                                        27,
	}
)

func (x Pdf417Barcode_OptionalFieldType) Enum() *Pdf417Barcode_OptionalFieldType {
	p := new(Pdf417Barcode_OptionalFieldType)
	*p = x
	return p
}

func (x Pdf417Barcode_OptionalFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pdf417Barcode_OptionalFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ddx_v1_barcode_proto_enumTypes[0].Descriptor()
}

func (Pdf417Barcode_OptionalFieldType) Type() protoreflect.EnumType {
	return &file_proto_ddx_v1_barcode_proto_enumTypes[0]
}

func (x Pdf417Barcode_OptionalFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pdf417Barcode_OptionalFieldType.Descriptor instead.
func (Pdf417Barcode_OptionalFieldType) EnumDescriptor() ([]byte, []int) {
	return file_proto_ddx_v1_barcode_proto_rawDescGZIP(), []int{0, 0}
}

// Pdf417Barcode - holds data extracted from PDF417 barcode detected on the document.
type Pdf417Barcode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JurisdictionSpecifiedVehicleClass denotes the vehicle class specified by the jurisdiction.
	// Available only for DL documents.
	JurisdictionSpecifiedVehicleClass string `protobuf:"bytes,1,opt,name=jurisdiction_specified_vehicle_class,json=jurisdictionSpecifiedVehicleClass,proto3" json:"jurisdiction_specified_vehicle_class,omitempty"`
	// JurisdictionSpecifiedRestrictionCodes represents codes that indicate
	// restrictions to driving privileges (e.g., airbrakes, automatic transmission). (b. DCB)
	// Available only for DL documents.
	JurisdictionSpecifiedRestrictionCodes string `protobuf:"bytes,2,opt,name=jurisdiction_specified_restriction_codes,json=jurisdictionSpecifiedRestrictionCodes,proto3" json:"jurisdiction_specified_restriction_codes,omitempty"`
	// JurisdictionSpecifiedEndorsementCodes represents codes that signify
	// additional privileges granted to the cardholder beyond the vehicle class. (c. DCD)
	// Available only for DL documents.
	JurisdictionSpecifiedEndorsementCodes string `protobuf:"bytes,3,opt,name=jurisdiction_specified_endorsement_codes,json=jurisdictionSpecifiedEndorsementCodes,proto3" json:"jurisdiction_specified_endorsement_codes,omitempty"`
	// DocumentExpirationDate denotes the date on which the driving and identification
	// privileges granted by the document are no longer valid. (MMDDCCYY for U.S.,
	// CCYYMMDD for Canada). (d. DBA)
	DocumentExpirationDate string `protobuf:"bytes,4,opt,name=document_expiration_date,json=documentExpirationDate,proto3" json:"document_expiration_date,omitempty"`
	// CustomerFamilyName indicates the family name of the cardholder (sometimes
	// called "last name" or "surname"). (e. DCS)
	CustomerFamilyName string `protobuf:"bytes,5,opt,name=customer_family_name,json=customerFamilyName,proto3" json:"customer_family_name,omitempty"`
	// CustomerFirstName denotes the first name of the cardholder. (f. DAC)
	CustomerFirstName string `protobuf:"bytes,6,opt,name=customer_first_name,json=customerFirstName,proto3" json:"customer_first_name,omitempty"`
	// CustomerMiddleNames represents the middle name(s) of the cardholder;
	// if there are multiple middle names, they shall be separated by a comma. (g. DAD)
	CustomerMiddleNames string `protobuf:"bytes,7,opt,name=customer_middle_names,json=customerMiddleNames,proto3" json:"customer_middle_names,omitempty"`
	// DocumentIssueDate indicates the date on which the document was issued.
	// (MMDDCCYY for U.S., CCYYMMDD for Canada). (h. DBD)
	DocumentIssueDate string `protobuf:"bytes,8,opt,name=document_issue_date,json=documentIssueDate,proto3" json:"document_issue_date,omitempty"`
	// DateOfBirth denotes the date on which the cardholder was born.
	// (MMDDCCYY for U.S., CCYYMMDD for Canada). (i. DBB)
	DateOfBirth string `protobuf:"bytes,9,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	// Gender represents the gender of the cardholder; 1 = male,
	// 2 = female, 9 = not specified. (j. DBC)
	Gender int32 `protobuf:"varint,10,opt,name=gender,proto3" json:"gender,omitempty"`
	// EyeColor indicates the color of the cardholder's eyes using ANSI D-20 codes. (k. DAY)
	EyeColor string `protobuf:"bytes,11,opt,name=eye_color,json=eyeColor,proto3" json:"eye_color,omitempty"`
	// Height represents the height of the cardholder; inches (in) or centimeters (cm). (l. DAU)
	Height string `protobuf:"bytes,12,opt,name=height,proto3" json:"height,omitempty"`
	// AddressStreet1 denotes the street portion of the cardholder's address. (m. DAG)
	AddressStreet1 string `protobuf:"bytes,13,opt,name=address_street1,json=addressStreet1,proto3" json:"address_street1,omitempty"`
	// AddressCity indicates the city portion of the cardholder's address. (n. DAI)
	AddressCity string `protobuf:"bytes,14,opt,name=address_city,json=addressCity,proto3" json:"address_city,omitempty"`
	// JurisdictionCode represents the state portion of the cardholder's address. (o. DAJ)
	JurisdictionCode string `protobuf:"bytes,15,opt,name=jurisdiction_code,json=jurisdictionCode,proto3" json:"jurisdiction_code,omitempty"`
	// PostalCode indicates the postal code portion of the cardholder's address in the U.S.
	// and Canada, using zeros to fill any trailing portion up to nine digits if unknown. (p. DAK)
	PostalCode string `protobuf:"bytes,16,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// CustomerID represents a number assigned or calculated by the issuing authority. (q. DAQ)
	CustomerId string `protobuf:"bytes,17,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// DocumentDiscriminator uniquely identifies a particular document issued to that customer
	// from others that may have been issued in the past; serves multiple purposes including
	// document discrimination, audit information number, and/or inventory control. (r. DCF)
	DocumentDiscriminator string `protobuf:"bytes,18,opt,name=document_discriminator,json=documentDiscriminator,proto3" json:"document_discriminator,omitempty"`
	// CountryIdentification indicates the country in which DL/ID is issued; U.S. = USA, Canada = CAN. (s. DCG)
	CountryIdentification string `protobuf:"bytes,19,opt,name=country_identification,json=countryIdentification,proto3" json:"country_identification,omitempty"`
	// FamilyNameTruncation indicates whether a field has been truncated: T = truncated,
	// N = not truncated, U = unknown if truncated. (t. DDE)
	FamilyNameTruncation string `protobuf:"bytes,20,opt,name=family_name_truncation,json=familyNameTruncation,proto3" json:"family_name_truncation,omitempty"`
	// FirstNameTruncation indicates whether a field has been truncated: T = truncated,
	// N = not truncated, U = unknown if truncated. (u. DDF)
	FirstNameTruncation string `protobuf:"bytes,21,opt,name=first_name_truncation,json=firstNameTruncation,proto3" json:"first_name_truncation,omitempty"`
	// MiddleNameTruncation indicates whether a field has been truncated: T = truncated,
	// N = not truncated, U = unknown if truncated. (v. DDG)
	MiddleNameTruncation string `protobuf:"bytes,22,opt,name=middle_name_truncation,json=middleNameTruncation,proto3" json:"middle_name_truncation,omitempty"`
	// Repeated field for optional fields.
	OptionalFields []*Pdf417Barcode_OptionalField `protobuf:"bytes,23,rep,name=optional_fields,json=optionalFields,proto3" json:"optional_fields,omitempty"`
}

func (x *Pdf417Barcode) Reset() {
	*x = Pdf417Barcode{}
	mi := &file_proto_ddx_v1_barcode_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pdf417Barcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pdf417Barcode) ProtoMessage() {}

func (x *Pdf417Barcode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_barcode_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pdf417Barcode.ProtoReflect.Descriptor instead.
func (*Pdf417Barcode) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_barcode_proto_rawDescGZIP(), []int{0}
}

func (x *Pdf417Barcode) GetJurisdictionSpecifiedVehicleClass() string {
	if x != nil {
		return x.JurisdictionSpecifiedVehicleClass
	}
	return ""
}

func (x *Pdf417Barcode) GetJurisdictionSpecifiedRestrictionCodes() string {
	if x != nil {
		return x.JurisdictionSpecifiedRestrictionCodes
	}
	return ""
}

func (x *Pdf417Barcode) GetJurisdictionSpecifiedEndorsementCodes() string {
	if x != nil {
		return x.JurisdictionSpecifiedEndorsementCodes
	}
	return ""
}

func (x *Pdf417Barcode) GetDocumentExpirationDate() string {
	if x != nil {
		return x.DocumentExpirationDate
	}
	return ""
}

func (x *Pdf417Barcode) GetCustomerFamilyName() string {
	if x != nil {
		return x.CustomerFamilyName
	}
	return ""
}

func (x *Pdf417Barcode) GetCustomerFirstName() string {
	if x != nil {
		return x.CustomerFirstName
	}
	return ""
}

func (x *Pdf417Barcode) GetCustomerMiddleNames() string {
	if x != nil {
		return x.CustomerMiddleNames
	}
	return ""
}

func (x *Pdf417Barcode) GetDocumentIssueDate() string {
	if x != nil {
		return x.DocumentIssueDate
	}
	return ""
}

func (x *Pdf417Barcode) GetDateOfBirth() string {
	if x != nil {
		return x.DateOfBirth
	}
	return ""
}

func (x *Pdf417Barcode) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *Pdf417Barcode) GetEyeColor() string {
	if x != nil {
		return x.EyeColor
	}
	return ""
}

func (x *Pdf417Barcode) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *Pdf417Barcode) GetAddressStreet1() string {
	if x != nil {
		return x.AddressStreet1
	}
	return ""
}

func (x *Pdf417Barcode) GetAddressCity() string {
	if x != nil {
		return x.AddressCity
	}
	return ""
}

func (x *Pdf417Barcode) GetJurisdictionCode() string {
	if x != nil {
		return x.JurisdictionCode
	}
	return ""
}

func (x *Pdf417Barcode) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Pdf417Barcode) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Pdf417Barcode) GetDocumentDiscriminator() string {
	if x != nil {
		return x.DocumentDiscriminator
	}
	return ""
}

func (x *Pdf417Barcode) GetCountryIdentification() string {
	if x != nil {
		return x.CountryIdentification
	}
	return ""
}

func (x *Pdf417Barcode) GetFamilyNameTruncation() string {
	if x != nil {
		return x.FamilyNameTruncation
	}
	return ""
}

func (x *Pdf417Barcode) GetFirstNameTruncation() string {
	if x != nil {
		return x.FirstNameTruncation
	}
	return ""
}

func (x *Pdf417Barcode) GetMiddleNameTruncation() string {
	if x != nil {
		return x.MiddleNameTruncation
	}
	return ""
}

func (x *Pdf417Barcode) GetOptionalFields() []*Pdf417Barcode_OptionalField {
	if x != nil {
		return x.OptionalFields
	}
	return nil
}

// Message representing an optional field with its type and value.
type Pdf417Barcode_OptionalField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  Pdf417Barcode_OptionalFieldType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.ddx.v1.Pdf417Barcode_OptionalFieldType" json:"type,omitempty"`
	Value string                          `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pdf417Barcode_OptionalField) Reset() {
	*x = Pdf417Barcode_OptionalField{}
	mi := &file_proto_ddx_v1_barcode_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pdf417Barcode_OptionalField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pdf417Barcode_OptionalField) ProtoMessage() {}

func (x *Pdf417Barcode_OptionalField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_barcode_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pdf417Barcode_OptionalField.ProtoReflect.Descriptor instead.
func (*Pdf417Barcode_OptionalField) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_barcode_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Pdf417Barcode_OptionalField) GetType() Pdf417Barcode_OptionalFieldType {
	if x != nil {
		return x.Type
	}
	return Pdf417Barcode_OPTIONAL_FIELD_TYPE_ADDRESS_STREET_2
}

func (x *Pdf417Barcode_OptionalField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_proto_ddx_v1_barcode_proto protoreflect.FileDescriptor

var file_proto_ddx_v1_barcode_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x64, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x22, 0x84, 0x15, 0x0a, 0x0d, 0x50,
	0x64, 0x66, 0x34, 0x31, 0x37, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x24,
	0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x6a, 0x75, 0x72, 0x69,
	0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x57, 0x0a,
	0x28, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x25, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x28, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45,
	0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x79, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x64, 0x66, 0x34, 0x31, 0x37, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x68, 0x0a,
	0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x41,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x64, 0x66, 0x34,
	0x31, 0x37, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf7, 0x0a, 0x0a, 0x11, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x24, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x45, 0x54, 0x5f, 0x32, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x49, 0x52, 0x54,
	0x48, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x30,
	0x0a, 0x2c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x47, 0x49, 0x56, 0x45, 0x4e, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x49,
	0x41, 0x53, 0x5f, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x07,
	0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x58, 0x10, 0x08, 0x12, 0x39, 0x0a, 0x35, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59,
	0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x09,
	0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x54, 0x48,
	0x4e, 0x49, 0x43, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x37, 0x0a, 0x33, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0b, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x5f, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0x0c, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x0d, 0x12, 0x50, 0x0a, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a,
	0x55, 0x52, 0x49, 0x53, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x43, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x4a, 0x0a, 0x46, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4a, 0x55, 0x52, 0x49, 0x53, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x53, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x4a, 0x0a, 0x46, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x55, 0x52,
	0x49, 0x53, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x10, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x11, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12, 0x3a, 0x0a, 0x36, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41,
	0x5a, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x13, 0x12, 0x3b, 0x0a, 0x37, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45,
	0x44, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x14, 0x12,
	0x25, 0x0a, 0x21, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x4f,
	0x55, 0x4e, 0x44, 0x53, 0x10, 0x15, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x16,
	0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x31, 0x38,
	0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x17, 0x12, 0x2b, 0x0a,
	0x27, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x31, 0x39, 0x5f, 0x55, 0x4e,
	0x54, 0x49, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x18, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x32, 0x31, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x19, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x52, 0x47, 0x41, 0x4e, 0x5f, 0x44, 0x4f, 0x4e, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x1a, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45,
	0x54, 0x45, 0x52, 0x41, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x1b, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x76, 0x65, 0x72, 0x69, 0x64, 0x69, 0x6c, 0x2f, 0x69, 0x64, 0x2d, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x64, 0x78, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ddx_v1_barcode_proto_rawDescOnce sync.Once
	file_proto_ddx_v1_barcode_proto_rawDescData = file_proto_ddx_v1_barcode_proto_rawDesc
)

func file_proto_ddx_v1_barcode_proto_rawDescGZIP() []byte {
	file_proto_ddx_v1_barcode_proto_rawDescOnce.Do(func() {
		file_proto_ddx_v1_barcode_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ddx_v1_barcode_proto_rawDescData)
	})
	return file_proto_ddx_v1_barcode_proto_rawDescData
}

var file_proto_ddx_v1_barcode_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_ddx_v1_barcode_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_ddx_v1_barcode_proto_goTypes = []any{
	(Pdf417Barcode_OptionalFieldType)(0), // 0: proto.ddx.v1.Pdf417Barcode.OptionalFieldType
	(*Pdf417Barcode)(nil),                // 1: proto.ddx.v1.Pdf417Barcode
	(*Pdf417Barcode_OptionalField)(nil),  // 2: proto.ddx.v1.Pdf417Barcode.OptionalField
}
var file_proto_ddx_v1_barcode_proto_depIdxs = []int32{
	2, // 0: proto.ddx.v1.Pdf417Barcode.optional_fields:type_name -> proto.ddx.v1.Pdf417Barcode.OptionalField
	0, // 1: proto.ddx.v1.Pdf417Barcode.OptionalField.type:type_name -> proto.ddx.v1.Pdf417Barcode.OptionalFieldType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_ddx_v1_barcode_proto_init() }
func file_proto_ddx_v1_barcode_proto_init() {
	if File_proto_ddx_v1_barcode_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ddx_v1_barcode_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_ddx_v1_barcode_proto_goTypes,
		DependencyIndexes: file_proto_ddx_v1_barcode_proto_depIdxs,
		EnumInfos:         file_proto_ddx_v1_barcode_proto_enumTypes,
		MessageInfos:      file_proto_ddx_v1_barcode_proto_msgTypes,
	}.Build()
	File_proto_ddx_v1_barcode_proto = out.File
	file_proto_ddx_v1_barcode_proto_rawDesc = nil
	file_proto_ddx_v1_barcode_proto_goTypes = nil
	file_proto_ddx_v1_barcode_proto_depIdxs = nil
}
