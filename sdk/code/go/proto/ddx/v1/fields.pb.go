// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: proto/ddx/v1/fields.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Alphabet - enum specifying the alphabet in a field
type Alphabet int32

const (
	// Latin alphabet
	Alphabet_ALPHABET_LATIN Alphabet = 0
	// Cyrillic alphabet
	Alphabet_ALPHABET_CYRILLIC Alphabet = 1
	// Arabic alphabet
	Alphabet_ALPHABET_ARABIC Alphabet = 2
)

// Enum value maps for Alphabet.
var (
	Alphabet_name = map[int32]string{
		0: "ALPHABET_LATIN",
		1: "ALPHABET_CYRILLIC",
		2: "ALPHABET_ARABIC",
	}
	Alphabet_value = map[string]int32{
		"ALPHABET_LATIN":    0,
		"ALPHABET_CYRILLIC": 1,
		"ALPHABET_ARABIC":   2,
	}
)

func (x Alphabet) Enum() *Alphabet {
	p := new(Alphabet)
	*p = x
	return p
}

func (x Alphabet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alphabet) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ddx_v1_fields_proto_enumTypes[0].Descriptor()
}

func (Alphabet) Type() protoreflect.EnumType {
	return &file_proto_ddx_v1_fields_proto_enumTypes[0]
}

func (x Alphabet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alphabet.Descriptor instead.
func (Alphabet) EnumDescriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{0}
}

// Type - an enum specifying field type. Eg. "First name", "Last name", "Address", etc.
type TextField_Type int32

const (
	// Represents the first name of an individual
	TextField_TYPE_FIRST_NAME TextField_Type = 0
	// Represents the last name of an individual
	TextField_TYPE_LAST_NAME TextField_Type = 1
	// Represents the nationality of an individual
	TextField_TYPE_NATIONALITY TextField_Type = 2
	// Represents the unique number assigned to a document
	TextField_TYPE_DOCUMENT_IDENTITY_NUMBER TextField_Type = 3
	// Represents the sex of an individual
	TextField_TYPE_SEX TextField_Type = 4
	// Represents the authority that issued a document
	TextField_TYPE_ISSUING_AUTHORITY TextField_Type = 5
	// Represents the address of an individual
	TextField_TYPE_ADDRESS TextField_Type = 6
	// Represents a unique personal identification number, such as OIB
	TextField_TYPE_PERSONAL_IDENTITY_NUMBER TextField_Type = 7
	// Represents the marital status of an individual
	TextField_TYPE_MARITAL_STATUS TextField_Type = 8
	// Represents additional information about an address
	TextField_TYPE_EXTENDED_ADDRESS TextField_Type = 9
	// Represents additional information about an address (second part)
	TextField_TYPE_EXTENDED_ADDRESS_SPECIFICS TextField_Type = 10
	// Represents a classification or category
	TextField_TYPE_CLASS TextField_Type = 11
	// Represents conditions or restrictions
	TextField_TYPE_CONDITIONS TextField_Type = 12
	// Represents endorsements or special permissions
	TextField_TYPE_ENDORSEMENTS TextField_Type = 13
	// Represents the type of licence or permit
	TextField_TYPE_DRIVERS_LICENSE_TYPE TextField_Type = 14
	// Represents the full name of an individual
	TextField_TYPE_FULL_NAME TextField_Type = 15
	// Represents the place of birth of an individual
	TextField_TYPE_PLACE_OF_BIRTH TextField_Type = 16
	// Represents the profession or occupation of an individual
	TextField_TYPE_PROFESSION TextField_Type = 17
	// Represents the employer of an individual
	TextField_TYPE_EMPLOYER TextField_Type = 18
	// Represents additional information about a name
	TextField_TYPE_EXTENDED_NAME TextField_Type = 19
	// Represents the father's name of an individual
	TextField_TYPE_FATHERS_NAME TextField_Type = 20
	// Represents the mother's name of an individual
	TextField_TYPE_MOTHERS_NAME TextField_Type = 21
	// Represents the race or ethnicity of an individual
	TextField_TYPE_RACE TextField_Type = 22
	// Represents the residential status of an individual
	TextField_TYPE_RESIDENTIAL_TYPE TextField_Type = 23
	// Represents restrictions or limitations
	TextField_TYPE_RESTRICTIONS TextField_Type = 24
	// Represents the blood type of an individual
	TextField_TYPE_BLOOD_TYPE TextField_Type = 25
	// Represents an additional numbers/codes that can appear on some documents
	TextField_TYPE_NUMBER TextField_Type = 26
)

// Enum value maps for TextField_Type.
var (
	TextField_Type_name = map[int32]string{
		0:  "TYPE_FIRST_NAME",
		1:  "TYPE_LAST_NAME",
		2:  "TYPE_NATIONALITY",
		3:  "TYPE_DOCUMENT_IDENTITY_NUMBER",
		4:  "TYPE_SEX",
		5:  "TYPE_ISSUING_AUTHORITY",
		6:  "TYPE_ADDRESS",
		7:  "TYPE_PERSONAL_IDENTITY_NUMBER",
		8:  "TYPE_MARITAL_STATUS",
		9:  "TYPE_EXTENDED_ADDRESS",
		10: "TYPE_EXTENDED_ADDRESS_SPECIFICS",
		11: "TYPE_CLASS",
		12: "TYPE_CONDITIONS",
		13: "TYPE_ENDORSEMENTS",
		14: "TYPE_DRIVERS_LICENSE_TYPE",
		15: "TYPE_FULL_NAME",
		16: "TYPE_PLACE_OF_BIRTH",
		17: "TYPE_PROFESSION",
		18: "TYPE_EMPLOYER",
		19: "TYPE_EXTENDED_NAME",
		20: "TYPE_FATHERS_NAME",
		21: "TYPE_MOTHERS_NAME",
		22: "TYPE_RACE",
		23: "TYPE_RESIDENTIAL_TYPE",
		24: "TYPE_RESTRICTIONS",
		25: "TYPE_BLOOD_TYPE",
		26: "TYPE_NUMBER",
	}
	TextField_Type_value = map[string]int32{
		"TYPE_FIRST_NAME":                 0,
		"TYPE_LAST_NAME":                  1,
		"TYPE_NATIONALITY":                2,
		"TYPE_DOCUMENT_IDENTITY_NUMBER":   3,
		"TYPE_SEX":                        4,
		"TYPE_ISSUING_AUTHORITY":          5,
		"TYPE_ADDRESS":                    6,
		"TYPE_PERSONAL_IDENTITY_NUMBER":   7,
		"TYPE_MARITAL_STATUS":             8,
		"TYPE_EXTENDED_ADDRESS":           9,
		"TYPE_EXTENDED_ADDRESS_SPECIFICS": 10,
		"TYPE_CLASS":                      11,
		"TYPE_CONDITIONS":                 12,
		"TYPE_ENDORSEMENTS":               13,
		"TYPE_DRIVERS_LICENSE_TYPE":       14,
		"TYPE_FULL_NAME":                  15,
		"TYPE_PLACE_OF_BIRTH":             16,
		"TYPE_PROFESSION":                 17,
		"TYPE_EMPLOYER":                   18,
		"TYPE_EXTENDED_NAME":              19,
		"TYPE_FATHERS_NAME":               20,
		"TYPE_MOTHERS_NAME":               21,
		"TYPE_RACE":                       22,
		"TYPE_RESIDENTIAL_TYPE":           23,
		"TYPE_RESTRICTIONS":               24,
		"TYPE_BLOOD_TYPE":                 25,
		"TYPE_NUMBER":                     26,
	}
)

func (x TextField_Type) Enum() *TextField_Type {
	p := new(TextField_Type)
	*p = x
	return p
}

func (x TextField_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextField_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ddx_v1_fields_proto_enumTypes[1].Descriptor()
}

func (TextField_Type) Type() protoreflect.EnumType {
	return &file_proto_ddx_v1_fields_proto_enumTypes[1]
}

func (x TextField_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextField_Type.Descriptor instead.
func (TextField_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{3, 0}
}

// Type - an enum specifying date field types
type DateField_Type int32

const (
	// Date of birth
	DateField_TYPE_DATE_OF_BIRTH DateField_Type = 0
	// Document issue date
	DateField_TYPE_ISSUE_DATE DateField_Type = 1
	// Document expiry date
	DateField_TYPE_EXPIRY_DATE DateField_Type = 2
	// Class effective date. Only for some of Australian document types that define "classes"
	DateField_TYPE_CLASS_EFFECTIVE_DATE DateField_Type = 3
	// Class expiry date. Only for some of Australian document types that define "classes"
	DateField_TYPE_CLASS_EXPIRY_DATE DateField_Type = 4
)

// Enum value maps for DateField_Type.
var (
	DateField_Type_name = map[int32]string{
		0: "TYPE_DATE_OF_BIRTH",
		1: "TYPE_ISSUE_DATE",
		2: "TYPE_EXPIRY_DATE",
		3: "TYPE_CLASS_EFFECTIVE_DATE",
		4: "TYPE_CLASS_EXPIRY_DATE",
	}
	DateField_Type_value = map[string]int32{
		"TYPE_DATE_OF_BIRTH":        0,
		"TYPE_ISSUE_DATE":           1,
		"TYPE_EXPIRY_DATE":          2,
		"TYPE_CLASS_EFFECTIVE_DATE": 3,
		"TYPE_CLASS_EXPIRY_DATE":    4,
	}
)

func (x DateField_Type) Enum() *DateField_Type {
	p := new(DateField_Type)
	*p = x
	return p
}

func (x DateField_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateField_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ddx_v1_fields_proto_enumTypes[2].Descriptor()
}

func (DateField_Type) Type() protoreflect.EnumType {
	return &file_proto_ddx_v1_fields_proto_enumTypes[2]
}

func (x DateField_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateField_Type.Descriptor instead.
func (DateField_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{4, 0}
}

// Type - an enum specifying field types that are visual fields.
// eg. "Face photo", "Signature", etc.
type VisualField_Type int32

const (
	// Face photo
	VisualField_TYPE_FACE_PHOTO VisualField_Type = 0
	// Signature
	VisualField_TYPE_SIGNATURE VisualField_Type = 1
)

// Enum value maps for VisualField_Type.
var (
	VisualField_Type_name = map[int32]string{
		0: "TYPE_FACE_PHOTO",
		1: "TYPE_SIGNATURE",
	}
	VisualField_Type_value = map[string]int32{
		"TYPE_FACE_PHOTO": 0,
		"TYPE_SIGNATURE":  1,
	}
)

func (x VisualField_Type) Enum() *VisualField_Type {
	p := new(VisualField_Type)
	*p = x
	return p
}

func (x VisualField_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisualField_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ddx_v1_fields_proto_enumTypes[3].Descriptor()
}

func (VisualField_Type) Type() protoreflect.EnumType {
	return &file_proto_ddx_v1_fields_proto_enumTypes[3]
}

func (x VisualField_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisualField_Type.Descriptor instead.
func (VisualField_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{5, 0}
}

// Sex - enumeration of registered genders
type SexField_Sex int32

const (
	// Unknown
	SexField_UNKNOWN SexField_Sex = 0
	// Male
	SexField_MALE SexField_Sex = 1
	// Female
	SexField_FEMALE SexField_Sex = 2
)

// Enum value maps for SexField_Sex.
var (
	SexField_Sex_name = map[int32]string{
		0: "UNKNOWN",
		1: "MALE",
		2: "FEMALE",
	}
	SexField_Sex_value = map[string]int32{
		"UNKNOWN": 0,
		"MALE":    1,
		"FEMALE":  2,
	}
)

func (x SexField_Sex) Enum() *SexField_Sex {
	p := new(SexField_Sex)
	*p = x
	return p
}

func (x SexField_Sex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SexField_Sex) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ddx_v1_fields_proto_enumTypes[4].Descriptor()
}

func (SexField_Sex) Type() protoreflect.EnumType {
	return &file_proto_ddx_v1_fields_proto_enumTypes[4]
}

func (x SexField_Sex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SexField_Sex.Descriptor instead.
func (SexField_Sex) EnumDescriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{6, 0}
}

// Polygon
type Polygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X []float32 `protobuf:"fixed32,1,rep,packed,name=x,proto3" json:"x,omitempty"`
	Y []float32 `protobuf:"fixed32,2,rep,packed,name=y,proto3" json:"y,omitempty"`
}

func (x *Polygon) Reset() {
	*x = Polygon{}
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polygon) ProtoMessage() {}

func (x *Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polygon.ProtoReflect.Descriptor instead.
func (*Polygon) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{0}
}

func (x *Polygon) GetX() []float32 {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *Polygon) GetY() []float32 {
	if x != nil {
		return x.Y
	}
	return nil
}

type Box struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y      float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Width  float32 `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`
	Height float32 `protobuf:"fixed32,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Box) Reset() {
	*x = Box{}
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Box) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box) ProtoMessage() {}

func (x *Box) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box.ProtoReflect.Descriptor instead.
func (*Box) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{1}
}

func (x *Box) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Box) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Box) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Box) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// Location specifies the position of a field on the input image and the position of a field on the dewarped document.
// Both polygon and box coordinates are relative to their respective image dimensions, and are all in range 0-1.
// E.g if an image resolution is 800x600 and x and y coordinates are 0.25 and 0.5 respectively, they translate
// to absolute coordinates of 200x300 = (800 * 0.25)x(600 * 0.5).
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The position of the field on the input image (before detection)
	DetectionOnInputImage *Polygon `protobuf:"bytes,4,opt,name=detection_on_input_image,json=detectionOnInputImage,proto3" json:"detection_on_input_image,omitempty"`
	// The position of the field on the dewarped document image (after detection)
	PositionOnDetectedDocument *Box `protobuf:"bytes,5,opt,name=position_on_detected_document,json=positionOnDetectedDocument,proto3" json:"position_on_detected_document,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{2}
}

func (x *Location) GetDetectionOnInputImage() *Polygon {
	if x != nil {
		return x.DetectionOnInputImage
	}
	return nil
}

func (x *Location) GetPositionOnDetectedDocument() *Box {
	if x != nil {
		return x.PositionOnDetectedDocument
	}
	return nil
}

// TextField - contains information of a single field detection on a document.
type TextField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type - field type
	Type TextField_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.ddx.v1.TextField_Type" json:"type,omitempty"`
	// OCR text value of the field
	Value    string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Alphabet Alphabet `protobuf:"varint,3,opt,name=alphabet,proto3,enum=proto.ddx.v1.Alphabet" json:"alphabet,omitempty"`
	// optional, empty by default, returned if specified in the ScanDocumentRequest
	Image []byte `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// EMPTY BY DEFAULT, the location of the field on the input image. Available depending
	// on user license plan
	Location *Location `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *TextField) Reset() {
	*x = TextField{}
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextField) ProtoMessage() {}

func (x *TextField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextField.ProtoReflect.Descriptor instead.
func (*TextField) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{3}
}

func (x *TextField) GetType() TextField_Type {
	if x != nil {
		return x.Type
	}
	return TextField_TYPE_FIRST_NAME
}

func (x *TextField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TextField) GetAlphabet() Alphabet {
	if x != nil {
		return x.Alphabet
	}
	return Alphabet_ALPHABET_LATIN
}

func (x *TextField) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *TextField) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type DateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type - date field type
	Type DateField_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.ddx.v1.DateField_Type" json:"type,omitempty"`
	// date - parsed date, if parsing fails it will empty
	Date *DateField_Date `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	// OCR text value of the field
	Value    string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Alphabet Alphabet `protobuf:"varint,4,opt,name=alphabet,proto3,enum=proto.ddx.v1.Alphabet" json:"alphabet,omitempty"`
	// optional, empty by default, returned if specified in the ScanDocumentRequest
	Image []byte `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	// EMPTY BY DEFAULT, the location of the field on the input image. Available depending
	// on user license plan
	Location *Location `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *DateField) Reset() {
	*x = DateField{}
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateField) ProtoMessage() {}

func (x *DateField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateField.ProtoReflect.Descriptor instead.
func (*DateField) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{4}
}

func (x *DateField) GetType() DateField_Type {
	if x != nil {
		return x.Type
	}
	return DateField_TYPE_DATE_OF_BIRTH
}

func (x *DateField) GetDate() *DateField_Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DateField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DateField) GetAlphabet() Alphabet {
	if x != nil {
		return x.Alphabet
	}
	return Alphabet_ALPHABET_LATIN
}

func (x *DateField) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *DateField) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// VisualField - holds information about a visual field
type VisualField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  VisualField_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.ddx.v1.VisualField_Type" json:"type,omitempty"`
	Image []byte           `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// EMPTY BY DEFAULT, the location of the field on the input image. Available depending
	// on user license plan
	Location *Location `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *VisualField) Reset() {
	*x = VisualField{}
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VisualField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisualField) ProtoMessage() {}

func (x *VisualField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisualField.ProtoReflect.Descriptor instead.
func (*VisualField) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{5}
}

func (x *VisualField) GetType() VisualField_Type {
	if x != nil {
		return x.Type
	}
	return VisualField_TYPE_FACE_PHOTO
}

func (x *VisualField) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *VisualField) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// SexField - holds gender information
type SexField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sex - holds enum value if it was successfully parsed, UNKNOWN otherwise
	Sex SexField_Sex `protobuf:"varint,1,opt,name=sex,proto3,enum=proto.ddx.v1.SexField_Sex" json:"sex,omitempty"`
	// textValue - holds OCR-ed value of the field
	Value    string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Alphabet Alphabet `protobuf:"varint,3,opt,name=alphabet,proto3,enum=proto.ddx.v1.Alphabet" json:"alphabet,omitempty"`
	// optional, empty by default, returned if specified in the ScanDocumentRequest
	Image []byte `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// EMPTY BY DEFAULT, the location of the field on the input image. Available depending
	// on user license plan
	Location *Location `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *SexField) Reset() {
	*x = SexField{}
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SexField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SexField) ProtoMessage() {}

func (x *SexField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SexField.ProtoReflect.Descriptor instead.
func (*SexField) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{6}
}

func (x *SexField) GetSex() SexField_Sex {
	if x != nil {
		return x.Sex
	}
	return SexField_UNKNOWN
}

func (x *SexField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SexField) GetAlphabet() Alphabet {
	if x != nil {
		return x.Alphabet
	}
	return Alphabet_ALPHABET_LATIN
}

func (x *SexField) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *SexField) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// Date - message representing parsed date
type DateField_Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// year, -1 if the information is not present in the document
	Year int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	// month, -1 if the information is not present in the document
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	// day, -1 if the information is not present in the document
	Day int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *DateField_Date) Reset() {
	*x = DateField_Date{}
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DateField_Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateField_Date) ProtoMessage() {}

func (x *DateField_Date) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ddx_v1_fields_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateField_Date.ProtoReflect.Descriptor instead.
func (*DateField_Date) Descriptor() ([]byte, []int) {
	return file_proto_ddx_v1_fields_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DateField_Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *DateField_Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *DateField_Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

var File_proto_ddx_v1_fields_proto protoreflect.FileDescriptor

var file_proto_ddx_v1_fields_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x64, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x22, 0x25, 0x0a, 0x07, 0x50, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x01, 0x79,
	0x22, 0x4f, 0x0a, 0x03, 0x42, 0x6f, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0xb0, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x18, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x15, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x54,
	0x0a, 0x1d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x78, 0x52, 0x1a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd1, 0x06, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x62, 0x65, 0x74, 0x52, 0x08, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x04, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x58, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x06, 0x12,
	0x21, 0x0a, 0x1d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x49, 0x54,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x53, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0c,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x53, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x53, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x49, 0x52, 0x54,
	0x48, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x52, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x54, 0x48,
	0x45, 0x52, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x15, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x10, 0x16,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x4f, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x1a, 0x22, 0xce, 0x03, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x32, 0x0a, 0x08, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x52, 0x08, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x62, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x42,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x49, 0x52, 0x54,
	0x48, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x53, 0x55,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x48, 0x4f,
	0x54, 0x4f, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x22, 0xf6, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x78,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x53, 0x65, 0x78, 0x52, 0x03,
	0x73, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x62, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x62, 0x65, 0x74, 0x52, 0x08, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x64,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x02, 0x2a, 0x4a, 0x0a, 0x08, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x5f, 0x43, 0x59,
	0x52, 0x49, 0x4c, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x42, 0x45, 0x54, 0x5f, 0x41, 0x52, 0x41, 0x42, 0x49, 0x43, 0x10, 0x02, 0x42, 0x34, 0x5a,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x65, 0x72, 0x69,
	0x64, 0x69, 0x6c, 0x2f, 0x69, 0x64, 0x2d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x64, 0x78,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ddx_v1_fields_proto_rawDescOnce sync.Once
	file_proto_ddx_v1_fields_proto_rawDescData = file_proto_ddx_v1_fields_proto_rawDesc
)

func file_proto_ddx_v1_fields_proto_rawDescGZIP() []byte {
	file_proto_ddx_v1_fields_proto_rawDescOnce.Do(func() {
		file_proto_ddx_v1_fields_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ddx_v1_fields_proto_rawDescData)
	})
	return file_proto_ddx_v1_fields_proto_rawDescData
}

var file_proto_ddx_v1_fields_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_ddx_v1_fields_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_ddx_v1_fields_proto_goTypes = []any{
	(Alphabet)(0),          // 0: proto.ddx.v1.Alphabet
	(TextField_Type)(0),    // 1: proto.ddx.v1.TextField.Type
	(DateField_Type)(0),    // 2: proto.ddx.v1.DateField.Type
	(VisualField_Type)(0),  // 3: proto.ddx.v1.VisualField.Type
	(SexField_Sex)(0),      // 4: proto.ddx.v1.SexField.Sex
	(*Polygon)(nil),        // 5: proto.ddx.v1.Polygon
	(*Box)(nil),            // 6: proto.ddx.v1.Box
	(*Location)(nil),       // 7: proto.ddx.v1.Location
	(*TextField)(nil),      // 8: proto.ddx.v1.TextField
	(*DateField)(nil),      // 9: proto.ddx.v1.DateField
	(*VisualField)(nil),    // 10: proto.ddx.v1.VisualField
	(*SexField)(nil),       // 11: proto.ddx.v1.SexField
	(*DateField_Date)(nil), // 12: proto.ddx.v1.DateField.Date
}
var file_proto_ddx_v1_fields_proto_depIdxs = []int32{
	5,  // 0: proto.ddx.v1.Location.detection_on_input_image:type_name -> proto.ddx.v1.Polygon
	6,  // 1: proto.ddx.v1.Location.position_on_detected_document:type_name -> proto.ddx.v1.Box
	1,  // 2: proto.ddx.v1.TextField.type:type_name -> proto.ddx.v1.TextField.Type
	0,  // 3: proto.ddx.v1.TextField.alphabet:type_name -> proto.ddx.v1.Alphabet
	7,  // 4: proto.ddx.v1.TextField.location:type_name -> proto.ddx.v1.Location
	2,  // 5: proto.ddx.v1.DateField.type:type_name -> proto.ddx.v1.DateField.Type
	12, // 6: proto.ddx.v1.DateField.date:type_name -> proto.ddx.v1.DateField.Date
	0,  // 7: proto.ddx.v1.DateField.alphabet:type_name -> proto.ddx.v1.Alphabet
	7,  // 8: proto.ddx.v1.DateField.location:type_name -> proto.ddx.v1.Location
	3,  // 9: proto.ddx.v1.VisualField.type:type_name -> proto.ddx.v1.VisualField.Type
	7,  // 10: proto.ddx.v1.VisualField.location:type_name -> proto.ddx.v1.Location
	4,  // 11: proto.ddx.v1.SexField.sex:type_name -> proto.ddx.v1.SexField.Sex
	0,  // 12: proto.ddx.v1.SexField.alphabet:type_name -> proto.ddx.v1.Alphabet
	7,  // 13: proto.ddx.v1.SexField.location:type_name -> proto.ddx.v1.Location
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_ddx_v1_fields_proto_init() }
func file_proto_ddx_v1_fields_proto_init() {
	if File_proto_ddx_v1_fields_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ddx_v1_fields_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_ddx_v1_fields_proto_goTypes,
		DependencyIndexes: file_proto_ddx_v1_fields_proto_depIdxs,
		EnumInfos:         file_proto_ddx_v1_fields_proto_enumTypes,
		MessageInfos:      file_proto_ddx_v1_fields_proto_msgTypes,
	}.Build()
	File_proto_ddx_v1_fields_proto = out.File
	file_proto_ddx_v1_fields_proto_rawDesc = nil
	file_proto_ddx_v1_fields_proto_goTypes = nil
	file_proto_ddx_v1_fields_proto_depIdxs = nil
}
